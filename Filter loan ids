// Author: Samuel Cortez
// Last updated: 2018-05-20



SHEETIDS = ['1rDJUwTAHNzkEMdJ_sAR1G6WjpF8siVYbKEbfEM_Mcaw', '1aYN10sN-qiTm8Zi1sScW3YDbrmsdUED6C76M4tMo6nc'];
SHEETNAMES = ['BK', 'Color'];
HEADERS = ['BK Confirmed?', 'Color'];
CONDITIONS = ['TRUE', 'Blue'];



// Create a loop counter to track the number of times a trigger is run
function refreshProperties() {
  
  // Create a sheet counter to keep track of sheets reviewed
  PropertiesService.getUserProperties().setProperty('sheetCounter', '0');
  
  // Create block counter to keep track of blocks reviewed in a sheet
  PropertiesService.getUserProperties().setProperty('blockCounter', '0');
  
  // Create trigger id to remember unique id of the 1-minute trigger
  PropertiesService.getUserProperties().setProperty('triggerId', '');
}



// Check if it is OK to review sheets
function checkSheets() {
  var currentDay = new Date();
  
  if (currentDay.getDay() >= 0 || currentDay.getDay() <= 5) {
    
    // Get current counter number
    var counter = Number(PropertiesService.getUserProperties().getProperty('sheetCounter'));
    var counterLimit = SHEETIDS.length;
    
    // Check current number of sheets reviewed
    if (counter < counterLimit) {
      
      // Create a 1-minute trigger if not all sheets have been reviewed
      createTrigger();
    } else {
      
      // Reset sheet counter to '0' if all sheets have been reviewed
      PropertiesService.getUserProperties().setProperty('sheetCounter', '0');
    }
  }
};



// Create a 1-minute trigger
function createTrigger() {
  var trigger = ScriptApp.newTrigger('filterLoans')
  .timeBased()
  .everyMinutes(1)
  .create();
  
  // Get id of the 1-minute trigger created
  var id = trigger.getUniqueId();
  PropertiesService.getUserProperties().setProperty('triggerId', id);
};



// Open selected sheet and return an object of filtered loan ids matching criteria
function filterLoans() {
  
  // Retrieve block and sheet counters
  var index = Number(PropertiesService.getUserProperties().getProperty('sheetCounter'));
  var counter = Number(PropertiesService.getUserProperties().getProperty('blockCounter'));
  
  // Get relevant sheet information to open and review sheet
  var sheetId = SHEETIDS[index], sheetName = SHEETNAMES[index], colHeader = HEADERS[index], condition = CONDITIONS[index];
  
  // Open sheet
  var ss = SpreadsheetApp.openById(sheetId);
  var sheet = ss.getSheetByName(sheetName);
  
  // Created an empty object
  var filteredLoanIds = []; // new Object();?
  
  // Get correct headers
  var header = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues();
  var loanIdCol = header[0].indexOf('Loan ID'); loanIdCol += 1;
  var conditionCol = header[0].indexOf(colHeader); conditionCol += 1;
  
  var startOfBlock = (counter * 50) + 2;
  
  // Count how many blocks exist in the sheet
  var totalBlocks = Math.ceil((sheet.getLastRow() - 1)/50); totalBlocks = totalBlocks - 1;
  
  try {
    
    // Check which block number will be reviewed
    if (counter < totalBlocks) {
      
      var endOfBlock = (counter + 1) * 50 + 1;
      
      // Create arrays for loan column and condition column
      var allLoanIds = sheet.getRange(startOfBlock, loanIdCol, endOfBlock).getValues();
      var allValues = sheet.getRange(startOfBlock, conditionCol, endOfBlock).getDisplayValues();
      
      // Loop through the values in the allValues array
      for (var i = 0; i < allValues.length; i++) {
        if (allValues[i][0] === condition) {
          var filterLoan = {
            loanId : allLoanIds[i],
            status : colHeader
          };
          filteredLoanIds.push(filterLoan);
        }
      }
      
      // Add 1 to block Counter
      counter += 1;
      PropertiesService.getUserProperties().setProperty('blockCounter', counter);
      
      logLoanIds(filteredLoanIds, SHEETNAMES[counter]);
    } else {
      var endOfBlock = sheet.getLastRow() - startOfBlock; endOfBlock = endOfBlock + 1;
      
      var allLoanIds = sheet.getRange(startOfBlock, loanIdCol, endOfBlock).getValues();
      var allValues = sheet.getRange(startOfBlock, conditionCol, endOfBlock).getDisplayValues();
      
      // Loop through values under the condition column
      for (var i = 0; i < allValues.length; i++) {
        if (allValues[i][0] === condition) {
          var filterLoan = {
            loanId : allLoanIds[i],
            status : colHeader
          };
          filteredLoanIds.push(filterLoan);
        }
      }
      
      // Delete the 1 minute trigger
      deleteTriggers();
      
      logLoanIds(filteredLoanIds, SHEETNAMES[counter]);
      
      // Reset the block counter
      PropertiesService.getUserProperties().setProperty('blockCounter', '0');
      
      // Add 1 to sheet counter
      index += 1;
      PropertiesService.getUserProperties().setProperty('sheetCounter', index);
      
      getSheet();
    }
  } catch(e) {
    logErrors('filterLoans', e);
  }
};



// Open landing doc, and drop filtered loan ids
function logLoanIds(loanIds, targetSheet) {
  
  // Open landing doc
  var ss = SpreadsheetApp.getActive();
  var sheet = ss.getSheetByName(targetSheet);
  var sheetAppended = ss.getSheetByName('Appended');
  
  for (var i = 0; i < loanIds.length; i++) {
    
    // Log loan id to next empty cell in corresponding tab
    sheet.getRange(sheet.getLastRow() + 1, 1).setValue(loanIds[i]['loanId']);
    
    // Log loan id to next empty cell in appended tab
    sheetAppended.getRange(sheetAppended.getLastRow() + 1, 1).setValue(loanIds[i]['loanId']);
    sheetAppended.getRange(sheetAppended.getLastRow(), 1).offset(0, 1).setValue(loanIds[i]['status']);
  }
};



// Delete all triggers
function deleteTriggers() {
  
  // Retrieve active triggers in this script
  var allTriggers = ScriptApp.getProjectTriggers();
  
  var targetId = PropertiesService.getUserProperties().getProperty('triggerId');
  
  // Find the 1-minute trigger and delete it
  try {
    allTriggers.forEach(function(element, index) {
      if (element.getUniqueId() === targetId) {
        ScriptApp.deleteTrigger(element);
      }
    });
  } catch(e) {
    logErrors('deleteTriggers', e);
  }
};



// Log errors
function logErrors(functionName, e) {
  var time = new Date();
  
  var ss = SpreadsheetApp.getActive();
  var sheet = ss.getSheetByName('Error_log');
  
  sheet.getRange(sheet.getLastRow(), 1).setValue('Error at function ' + functionName + 'on ' + time + ': ' + e);
};
