// Author: Samuel Cortez
// Last updated: 2018-05-20

/* 
Current status:
Script can open selected sheets and filter out loan ids from given criteria
Filtered loan ids are logged unto target sheet

Updates needed:
- Add aggregate of filtered loan ids
- Have function filterLoans() loop so that it does not time out
- implement ".filter()" method?
*/



// Create a loop counter to track the number of times a trigger is run
function refreshProperties() {
  
  // Create a property called "blockCounter"
  PropertiesService.getUserProperties().setProperty('blockCounter', '0');
}




// Enter 1-min trigger function()



function getSheets() {
  
  refreshProperties();
  
  // Infomation on True_False
  var sheetIdBK = '1rDJUwTAHNzkEMdJ_sAR1G6WjpF8siVYbKEbfEM_Mcaw';
  var sheetBK = 'BK';
  var statusBK = 'BK Confirmed?';
  var conditionBK = 'TRUE';
  
  
  // Information on Color
  var sheetIdColor = '1aYN10sN-qiTm8Zi1sScW3YDbrmsdUED6C76M4tMo6nc';
  var sheetColor = 'Color';
  var statusColor = 'Color';
  var conditionColor = 'Blue';
  
  // Filter BK loan ids and log them in BK tab of Landing Doc
  var loanIdBK = filterLoans(sheetIdBK, sheetBK, statusBK, conditionBK);
  var landBKLoanIds = logLoanIds(loanIdBK, sheetBK);
  
  // Filter Color loan ids and log them in Color tab of Landing Doc
  var loanIdBlue = filterLoans(sheetIdColor, sheetColor, statusColor, conditionColor);
  var landColorLoanIds = logLoanIds(loanIdBlue, sheetColor);
};



// Delete all triggers
function deleteTriggers() {
  
  // Retrieve active triggers in this script
  var allTriggers = ScriptApp.getProjectTriggers();
  
  for (var i = 0; i < allTriggers.length; i++) {
    ScriptApp.deleteTrigger(allTriggers[i]);
  } 
}



// Open selected sheet and return an object of filtered loan ids matching criteria
function filterLoans(sheetId, sheetName, status, condition) {
  // Open sheet
  var ss = SpreadsheetApp.openById(sheetId);
  var sheet = ss.getSheetByName(sheetName);
  
  // Created an empty object
  var filteredLoanIds = {}; // new Object();?
  
  // Get correct headers
  var header = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues();
  var loanIdCol = header[0].indexOf('Loan ID'); loanIdCol += 1;
  var targetCol = header[0].indexOf(status); targetCol += 1;
  
  // Find loop limit based on total number of blocks
  var lastRow = sheet.getLastRow() - 1;
  var loopLimit = Math.ceil(lastRow/50) - 1;
  Logger.log('loopLimit: ' + loopLimit);
  
  // loop through loopLimit
  for (var i = 0; i <= loopLimit; i++) {
    Logger.log('current loop: ' + i);
    
    // Set integer value for beginning row
    var startOfBlock = (i * 50) + 2;
    Logger.log('startOfBlock: ' + startOfBlock);
    
    // Check if trigger has ran over the loop limit
    if ( i < loopLimit) {
      
      // Set integetr value for ending row
      var endOfBlock = (i + 1) * 50 + 1;
      Logger.log('endOfBlock: ' + endOfBlock);
      
      var allLoanIds = sheet.getRange(startOfBlock, loanIdCol, endOfBlock).getValues();
      var allStatuses = sheet.getRange(startOfBlock, targetCol, endOfBlock).getDisplayValues();
      Logger.log('length of status: ' + allStatuses.length);
      
      for (var x = 0; x < allStatuses.length; x++)  {
        
        if (allStatuses[x][0] === condition) {
          
          filteredLoanIds[allLoanIds[x]] = status;
        }
      }
      allLoanIds = [];
      allStatuses = [];
    } else {
      
      Logger.log('"i" is greater than the loop limit');
      var endOfBlock = sheet.getLastRow() - startOfBlock + 1;
      Logger.log('Next direction: ' + endOfBlock);
      
      // Assuming the loan id, and condition column have the same rows
      var allLoanIds = sheet.getRange(startOfBlock, loanIdCol, endOfBlock).getValues();
      var allStatuses = sheet.getRange(startOfBlock, targetCol, endOfBlock).getDisplayValues();
      Logger.log('length of status: ' + allStatuses.length);
      
      for (var x = 0; x < allStatuses.length; x++)  {
        
        if (allStatuses[x][0] === condition) {
          
          filteredLoanIds[allLoanIds[x]] = status;
        }    
        // End trigger
        deleteTriggers();
      }
      allLoanIds = [];
      allStatuses = [];
    } 
  } 
  
  Logger.log('filtered loans: ' + filteredLoanIds.keys().length);
  // Return filteredLoanIds object
  return filteredLoanIds;
};



// Open landing doc, and drop filtered loan ids
function logLoanIds(loanIds, targetSheet) {
  
  // Open landing doc
  var ss = SpreadsheetApp.getActive();
  var sheet = ss.getSheetByName(targetSheet);
  var sheetAppended = ss.getSheetByName('Appended');
  
  for (var i in loanIds) {
    
    // Log loan id to next empty cell in corresponding tab
    sheet.getRange(sheet.getLastRow() + 1, 1).setValue(i);
    
    // Log loan id to next empty cell in appended tab
    sheetAppended.getRange(sheetAppended.getLastRow() + 1, 1).setValue(i);
    sheetAppended.getRange(sheetAppended.getLastRow(), 1).offset(0, 1).setValue(loanIds[i]);
  }
  
};
